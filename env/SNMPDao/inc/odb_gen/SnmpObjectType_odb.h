// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SNMP_OBJECT_TYPE_ODB_H
#define SNMP_OBJECT_TYPE_ODB_H

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "SnmpObjectType.hpp"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // SnmpObjectType
  //
  template <>
  struct class_traits< ::SnmpObjectType >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::SnmpObjectType >
  {
    public:
    typedef ::SnmpObjectType object_type;
    typedef ::std::shared_ptr< ::SnmpObjectType > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mssql/version.hxx>
#include <odb/mssql/forward.hxx>
#include <odb/mssql/binding.hxx>
#include <odb/mssql/mssql-types.hxx>
#include <odb/mssql/query.hxx>

namespace odb
{
  // SnmpObjectType
  //
  template <typename A>
  struct query_columns< ::SnmpObjectType, id_mssql, A >
  {
    // snmpObjectTypeId
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        long unsigned int,
        mssql::id_bigint >::query_type,
      mssql::id_bigint >
    snmpObjectTypeId_type_;

    static const snmpObjectTypeId_type_ snmpObjectTypeId;

    // typeName
    //
    typedef
    mssql::query_column<
      mssql::value_traits<
        ::std::string,
        mssql::id_string >::query_type,
      mssql::id_string >
    typeName_type_;

    static const typeName_type_ typeName;
  };

  template <typename A>
  const typename query_columns< ::SnmpObjectType, id_mssql, A >::snmpObjectTypeId_type_
  query_columns< ::SnmpObjectType, id_mssql, A >::
  snmpObjectTypeId (A::table_name, "[snmpObjectTypeId]", 0);

  template <typename A>
  const typename query_columns< ::SnmpObjectType, id_mssql, A >::typeName_type_
  query_columns< ::SnmpObjectType, id_mssql, A >::
  typeName (A::table_name, "[typeName]", 0, 45);

  template <typename A>
  struct pointer_query_columns< ::SnmpObjectType, id_mssql, A >:
    query_columns< ::SnmpObjectType, id_mssql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::SnmpObjectType, id_mssql >:
    public access::object_traits< ::SnmpObjectType >
  {
    public:
    static const std::size_t batch = 1UL;

    static const bool rowversion = false;

    struct id_image_type
    {
      long long id_value;
      SQLLEN id_size_ind;

      std::size_t version;
    };

    struct image_type
    {
      // snmpObjectTypeId_
      //
      long long snmpObjectTypeId_value;
      SQLLEN snmpObjectTypeId_size_ind;

      // typeName_
      //
      char typeName_value[46];
      SQLLEN typeName_size_ind;

      std::size_t version;

      mssql::change_callback change_callback_;

      mssql::change_callback*
      change_callback ()
      {
        return &change_callback_;
      }
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static void
    bind (mssql::bind*,
          image_type&,
          mssql::statement_kind);

    static void
    bind (mssql::bind*, id_image_type&);

    static void
    init (image_type&,
          const object_type&,
          mssql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mssql::object_statements<object_type> statements_type;

    typedef mssql::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::SnmpObjectType, id_common >:
    public access::object_traits_impl< ::SnmpObjectType, id_mssql >
  {
  };

  // SnmpObjectType
  //
}

#include "SnmpObjectType_odb_inline.h"

#include <odb/post.hxx>

#endif // SNMP_OBJECT_TYPE_ODB_H
